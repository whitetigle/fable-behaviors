{"version":3,"sources":["..\\..\\..\\..\\node_modules\\fable-import-pixi\\Fable.Import.Pixi.fs"],"names":[],"mappings":"29DAgFwE,4BAAkB,C,wCACZ,4BAAkB,C,+CACX,4BAAkB,C,mDAChB,4BAAkB,C,4EACM,4BAAkB,C,oEACxD,4BAAkB,C,sDACS,4BAAkB,C,iEACxB,4BAAkB,C,svCAExG,wKAAa,C,iGAsCiD,4BAAkB,C,mFACZ,4BAAkB,C,yEACtB,4BAAkB,C,+FACP,4BAAkB,C,2DACnD,4BAAkB,C,iFACZ,4BAAkB,C,qEACxB,4BAAkB,C,yDACxB,4BAAkB,C,mDACJ,4BAAkB,C,uDAC5B,4BAAkB,C,mDACb,4BAAkB,C,sDACG,4BAAkB,C,sFACmC,4BAAkB,C,sDAClF,4BAAkB,C,uGACqG,4BAAkB,C,yCACpK,4BAAkB,C,2DACU,4BAAkB,C,kEACvB,4BAAkB,C,+CAiBQ,4BAAkB,C,mDAiBhB,4BAAkB,C,gDAtFtC,4BAAkB,C,oBAAmC,4BAAkB,C,iDACrE,4BAAkB,C,oBAAoC,4BAAkB,C,oDAC/E,4BAAkB,C,oBAA0B,4BAAkB,C,4CACvE,4BAAkB,C,oBAAyB,4BAAkB,C,yCAChE,4BAAkB,C,oBAAyB,4BAAkB,C,4CAC1D,4BAAkB,C,oBAAyB,4BAAkB,C,yCAC/D,4BAAkB,C,oBAA0B,4BAAkB,C,+BACvE,4BAAkB,C,oBAA2B,4BAAkB,C,+BAC/D,4BAAkB,C,oBAA2B,4BAAkB,C,mCACvD,4BAAkB,C,oBAA+B,4BAAkB,C,0CAC5D,4BAAkB,C,oBAA+B,4BAAkB,C,iCAC5E,4BAAkB,C,oBAA+B,4BAAkB,C,yCACjE,4BAAkB,C,oBAAyB,4BAAkB,C,oCAChE,4BAAkB,C,oBAA2B,4BAAkB,C,iCAClE,4BAAkB,C,oBAA2B,4BAAkB,C,iCAC/D,4BAAkB,C,oBAA2B,4BAAkB,C,oCAC5D,4BAAkB,C,oBAA2B,4BAAkB,C,sCAC9D,4BAAkB,C,oBAA0B,4BAAkB,C,iCAClE,4BAAkB,C,oBAA2B,4BAAkB,C,mCAC9D,4BAAkB,C,oBAA0B,4BAAkB,C,kCAC1D,4BAAkB,C,oBAA+B,4BAAkB,C,sCACnE,4BAAkB,C,oBAA2B,4BAAkB,C,0CAC1D,4BAAkB,C,oBAA4B,4BAAkB,C,sCACjE,4BAAkB,C,oBAA+B,4BAAkB,C,6BAChF,4BAAkB,C,oBAA2B,4BAAkB,C,6BAC/D,4BAAkB,C,oBAA2B,4BAAkB,C,wCACrD,4BAAkB,C,oBAA0B,4BAAkB,C,gCAC/C,4BAAkB,C,oBAAiD,4BAAkB,C,mCAC3E,4BAAkB,C,oBAAwD,4BAAkB,C,gCAC3H,4BAAkB,C,oBAA4B,4BAAkB,C,uCAC3D,4BAAkB,C,oBAA0B,4BAAkB,C,sCAC/D,4BAAkB,C,oBAA0B,4BAAkB,C,+CACrD,4BAAkB,C,oBAA0B,4BAAkB,C,yCAClE,4BAAkB,C,oBAA4B,4BAAkB,C,mCACrE,4BAAkB,C,oBAA6B,4BAAkB,C","file":"Fable.Import.Pixi.js","sourcesContent":["// Type definitions for Pixi.js 3.0.9 dev\n// Project: https://github.com/GoodBoyDigital/pixi.js/\n// Definitions by: clark-stevenson <https://github.com/pixijs/pixi-typescript>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n\nnamespace Fable.Import\n\n#nowarn \"1182\"\n\nopen System\nopen Fable.Core\nopen Fable.Import.JS\nopen Fable.Import.Browser\n\nmodule PIXI =\n    type RendererType =\n        abstract member UNKNOWN: float\n        abstract member WEBGL: float\n        abstract member CANVAS: float\n\n    type BlendModes =\n        abstract member NORMAL: float\n        abstract member ADD: float\n        abstract member MULTIPLY: float\n        abstract member SCREEN: float\n        abstract member OVERLAY: float\n        abstract member DARKEN: float\n        abstract member LIGHTEN: float\n        abstract member COLOR_DODGE: float\n        abstract member COLOR_BURN: float\n        abstract member HARD_LIGHT: float\n        abstract member SOFT_LIGHT: float\n        abstract member DIFFERENCE: float\n        abstract member EXCLUSION: float\n        abstract member HUE: float\n        abstract member SATURATION: float\n        abstract member COLOR: float\n        abstract member LUMINOSITY: float\n\n    type DrawModes =\n        abstract member POINTS: float\n        abstract member LINES: float\n        abstract member LINE_LOOP: float\n        abstract member LINE_STRIP: float\n        abstract member TRIANGLES: float\n        abstract member TRIANGLE_STRIP: float\n        abstract member TRIANGLE_FAN: float\n\n    type ScaleModes =\n        abstract member DEFAULT: float\n        abstract member LINEAR: float\n        abstract member NEAREST: float\n\n    type DefaultRenderOptions =\n        abstract member view: HTMLCanvasElement\n        abstract member resolution: float\n        abstract member antialias: bool\n        abstract member forceFXAA: bool\n        abstract member autoResize: bool\n        abstract member transparent: bool\n        abstract member backgroundColor: float\n        abstract member clearBeforeRender: bool\n        abstract member preserveDrawingBuffer: bool\n        abstract member roundPixels: bool\n\n    type Shapes =\n        abstract member POLY: float\n        abstract member RECT: float\n        abstract member CIRC: float\n        abstract member ELIP: float\n        abstract member RREC: float\n\n    type InteractionEvent =\n        abstract stopped: bool with get, set\n        abstract target: obj with get, set\n        abstract ``type``: string with get, set\n        abstract data: obj (*InteractionData*) with get, set\n        abstract stopPropagation: unit -> unit\n\n    type EventEmitter() =\n        member __.listeners(``event``: string): ResizeArray<Function> = failwith \"JS only\"\n        member __.emit(``event``: string, [<ParamArray>] args: obj[]): bool = failwith \"JS only\"\n        member __.on(``event``: string, fn: Function, ?context: obj): EventEmitter = failwith \"JS only\"\n        member __.once(``event``: string, fn: Function, ?context: obj): EventEmitter = failwith \"JS only\"\n        member __.removeListener(``event``: string, ?fn: Function, ?context: obj, ?once: bool): EventEmitter = failwith \"JS only\"\n        member __.removeAllListeners(?``event``: string): EventEmitter = failwith \"JS only\"\n        member __.off(``event``: string, ?fn: Function, ?context: obj, ?once: bool): EventEmitter = failwith \"JS only\"\n        member __.addListener(``event``: string, fn: Function, ?context: obj): EventEmitter = failwith \"JS only\"\n\n    and DisplayObject() =\n        inherit EventEmitter()\n        // interface interaction.InteractiveTarget\n        member __._originalRenderWebGL with get(): WebGLRenderer = failwith \"JS only\" and set(v: WebGLRenderer): unit = failwith \"JS only\"\n        member __._originalRenderCanvas with get(): CanvasRenderer = failwith \"JS only\" and set(v: CanvasRenderer): unit = failwith \"JS only\"\n        member __._originalUpdateTransform with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __._originalHitTest with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n        member __._cachedSprite with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n        member __._originalDestroy with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n        member __.cacheAsBitmap with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __._sr with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __._cr with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __._bounds with get(): Rectangle = failwith \"JS only\" and set(v: Rectangle): unit = failwith \"JS only\"\n        member __._currentBounds with get(): Rectangle = failwith \"JS only\" and set(v: Rectangle): unit = failwith \"JS only\"\n        member __._mask with get(): Rectangle = failwith \"JS only\" and set(v: Rectangle): unit = failwith \"JS only\"\n        member __._cachedObject with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n        member __.position with get(): Point = failwith \"JS only\" and set(v: Point): unit = failwith \"JS only\"\n        member __.scale with get(): Point = failwith \"JS only\" and set(v: Point): unit = failwith \"JS only\"\n        member __.pivot with get(): Point = failwith \"JS only\" and set(v: Point): unit = failwith \"JS only\"\n        member __.rotation with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.renderable with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.alpha with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.visible with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.parent with get(): Container = failwith \"JS only\" and set(v: Container): unit = failwith \"JS only\"\n        member __.worldAlpha with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.worldTransform with get(): Matrix = failwith \"JS only\" and set(v: Matrix): unit = failwith \"JS only\"\n        member __.filterArea with get(): Rectangle = failwith \"JS only\" and set(v: Rectangle): unit = failwith \"JS only\"\n        member __.x with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.y with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.worldVisible with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.mask with get(): U2<Graphics, Sprite> option = failwith \"JS only\" and set(v: U2<Graphics, Sprite> option): unit = failwith \"JS only\"\n        member __.filters with get(): ResizeArray<AbstractFilter> option = failwith \"JS only\" and set(v: ResizeArray<AbstractFilter> option): unit = failwith \"JS only\"\n        member __.name with get(): string = failwith \"JS only\" and set(v: string): unit = failwith \"JS only\"\n        member __.interactive with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.buttonMode with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.interactiveChildren with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.defaultCursor with get(): string = failwith \"JS only\" and set(v: string): unit = failwith \"JS only\"\n        member __.hitArea with get(): HitArea = failwith \"JS only\" and set(v: HitArea): unit = failwith \"JS only\"\n        member __._renderCachedWebGL(renderer: WebGLRenderer): unit = failwith \"JS only\"\n        member __._initCachedDisplayObject(renderer: WebGLRenderer): unit = failwith \"JS only\"\n        member __._renderCachedCanvas(renderer: CanvasRenderer): unit = failwith \"JS only\"\n        member __._initCachedDisplayObjectCanvas(renderer: CanvasRenderer): unit = failwith \"JS only\"\n        member __._getCachedBounds(): Rectangle = failwith \"JS only\"\n        member __._destroyCachedDisplayObject(): unit = failwith \"JS only\"\n        member __._cacheAsBitmapDestroy(): unit = failwith \"JS only\"\n        member __.updateTransform(): unit = failwith \"JS only\"\n        member __.getBounds(?matrix: Matrix): Rectangle = failwith \"JS only\"\n        member __.getLocalBounds(): Rectangle = failwith \"JS only\"\n        member __.toGlobal(position: Point): Point = failwith \"JS only\"\n        member __.toLocal(position: Point, ?from: DisplayObject): Point = failwith \"JS only\"\n        member __.generateTexture(renderer: U2<CanvasRenderer, WebGLRenderer>, scaleMode: float, resolution: float): Texture = failwith \"JS only\"\n        member __.setParent(container: Container): Container = failwith \"JS only\"\n        member __.setTransform(?x: float, ?y: float, ?scaleX: float, ?scaleY: float, ?rotation: float, ?skewX: float, ?skewY: float, ?pivotX: float, ?pivotY: float): DisplayObject = failwith \"JS only\"\n        member __.destroy(): unit = failwith \"JS only\"\n        member __.getChildByName(name: string): DisplayObject = failwith \"JS only\"\n        member __.getGlobalPosition(point: Point): Point = failwith \"JS only\"\n        [<Emit(\"$0.on('click',$1...)\")>] member __.on_click(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.on('mousedown',$1...)\")>] member __.on_mousedown(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.on('mouseout',$1...)\")>] member __.on_mouseout(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.on('mouseover',$1...)\")>] member __.on_mouseover(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.on('mouseup',$1...)\")>] member __.on_mouseup(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.on('mouseclick',$1...)\")>] member __.on_mouseclick(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.on('mouseupoutside',$1...)\")>] member __.on_mouseupoutside(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.on('rightclick',$1...)\")>] member __.on_rightclick(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.on('rightdown',$1...)\")>] member __.on_rightdown(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.on('rightup',$1...)\")>] member __.on_rightup(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.on('rightupoutside',$1...)\")>] member __.on_rightupoutside(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.on('tap',$1...)\")>] member __.on_tap(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.on('touchend',$1...)\")>] member __.on_touchend(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.on('touchendoutside',$1...)\")>] member __.on_touchendoutside(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.on('touchmove',$1...)\")>] member __.on_touchmove(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.on('touchstart',$1...)\")>] member __.on_touchstart(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        member __.on(``event``: string, fn: Function, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.once('click',$1...)\")>] member __.once_click(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.once('mousedown',$1...)\")>] member __.once_mousedown(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.once('mouseout',$1...)\")>] member __.once_mouseout(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.once('mouseover',$1...)\")>] member __.once_mouseover(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.once('mouseup',$1...)\")>] member __.once_mouseup(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.once('mouseclick',$1...)\")>] member __.once_mouseclick(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.once('mouseupoutside',$1...)\")>] member __.once_mouseupoutside(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.once('rightclick',$1...)\")>] member __.once_rightclick(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.once('rightdown',$1...)\")>] member __.once_rightdown(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.once('rightup',$1...)\")>] member __.once_rightup(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.once('rightupoutside',$1...)\")>] member __.once_rightupoutside(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.once('tap',$1...)\")>] member __.once_tap(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.once('touchend',$1...)\")>] member __.once_touchend(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.once('touchendoutside',$1...)\")>] member __.once_touchendoutside(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.once('touchmove',$1...)\")>] member __.once_touchmove(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.once('touchstart',$1...)\")>] member __.once_touchstart(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        member __.once(``event``: string, fn: Function, ?context: obj): EventEmitter = failwith \"JS only\"\n\n    and [<Import(\"Container\",\"PIXI\")>] Container() =\n        inherit DisplayObject()\n        member __.onChildrenChange with get(): Func<unit> = failwith \"JS only\" and set(v: Func<unit>): unit = failwith \"JS only\"\n        member __.children with get(): ResizeArray<DisplayObject> = failwith \"JS only\" and set(v: ResizeArray<DisplayObject>): unit = failwith \"JS only\"\n        member __.width with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.height with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __._renderWebGL(renderer: WebGLRenderer): unit = failwith \"JS only\"\n        member __._renderCanvas(renderer: CanvasRenderer): unit = failwith \"JS only\"\n        member __.addChild([<ParamArray>] child: DisplayObject[]): DisplayObject = failwith \"JS only\"\n        member __.addChildAt(child: DisplayObject, index: float): DisplayObject = failwith \"JS only\"\n        member __.swapChildren(child: DisplayObject, child2: DisplayObject): unit = failwith \"JS only\"\n        member __.getChildIndex(child: DisplayObject): float = failwith \"JS only\"\n        member __.setChildIndex(child: DisplayObject, index: float): unit = failwith \"JS only\"\n        member __.getChildAt(index: float): DisplayObject = failwith \"JS only\"\n        member __.removeChild(child: DisplayObject): DisplayObject = failwith \"JS only\"\n        member __.removeChildAt(index: float): DisplayObject = failwith \"JS only\"\n        member __.removeChildren(?beginIndex: float, ?endIndex: float): ResizeArray<DisplayObject> = failwith \"JS only\"\n        member __.destroy(?destroyChildren: bool): unit = failwith \"JS only\"\n        member __.generateTexture(renderer: U2<CanvasRenderer, WebGLRenderer>, ?resolution: float, ?scaleMode: float): Texture = failwith \"JS only\"\n        member __.renderWebGL(renderer: WebGLRenderer): unit = failwith \"JS only\"\n        member __.renderCanvas(renderer: CanvasRenderer): unit = failwith \"JS only\"\n        [<Emit(\"$0.once('added',$1...)\")>] member __.once_added(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        member __.once(``event``: string, fn: Function, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.once('removed',$1...)\")>] member __.once_removed(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.on('added',$1...)\")>] member __.on_added(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        member __.on(``event``: string, fn: Function, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.on('removed',$1...)\")>] member __.on_removed(fn: Func<InteractionEvent, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n\n    and [<Import(\"GraphicsData\",\"PIXI\")>] GraphicsData(lineWidth: float, lineColor: float, lineAlpha: float, fillColor: float, fillAlpha: float, fill: bool, shape: U4<Circle, Rectangle, Ellipse, Polygon>) =\n        member __.lineWidth with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.lineColor with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.lineAlpha with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.fillColor with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.fillAlpha with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.fill with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.shape with get(): U4<Circle, Rectangle, Ellipse, Polygon> = failwith \"JS only\" and set(v: U4<Circle, Rectangle, Ellipse, Polygon>): unit = failwith \"JS only\"\n        member __.``type`` with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __._lineTint with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __._fillTint with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.clone(): GraphicsData = failwith \"JS only\"\n\n    and [<Import(\"Graphics\",\"PIXI\")>] Graphics() =\n        inherit Container()\n        member __.boundsDirty with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.dirty with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.glDirty with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.fillAlpha with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.lineWidth with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.lineColor with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.tint with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.blendMode with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.isMask with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.boundsPadding with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.clone(): Graphics = failwith \"JS only\"\n        member __.lineStyle(?lineWidth: float, ?color: float, ?alpha: float): Graphics = failwith \"JS only\"\n        member __.moveTo(x: float, y: float): Graphics = failwith \"JS only\"\n        member __.lineTo(x: float, y: float): Graphics = failwith \"JS only\"\n        member __.quadraticCurveTo(cpX: float, cpY: float, toX: float, toY: float): Graphics = failwith \"JS only\"\n        member __.bezierCurveTo(cpX: float, cpY: float, cpX2: float, cpY2: float, toX: float, toY: float): Graphics = failwith \"JS only\"\n        member __.arcTo(x1: float, y1: float, x2: float, y2: float, radius: float): Graphics = failwith \"JS only\"\n        member __.arc(cx: float, cy: float, radius: float, startAngle: float, endAngle: float, ?anticlockwise: bool): Graphics = failwith \"JS only\"\n        member __.beginFill(color: float, ?alpha: float): Graphics = failwith \"JS only\"\n        member __.endFill(): Graphics = failwith \"JS only\"\n        member __.drawRect(x: float, y: float, width: float, height: float): Graphics = failwith \"JS only\"\n        member __.drawRoundedRect(x: float, y: float, width: float, height: float, radius: float): Graphics = failwith \"JS only\"\n        member __.drawCircle(x: float, y: float, radius: float): Graphics = failwith \"JS only\"\n        member __.drawEllipse(x: float, y: float, width: float, height: float): Graphics = failwith \"JS only\"\n        member __.drawPolygon(path: U2<ResizeArray<float>, ResizeArray<Point>>): Graphics = failwith \"JS only\"\n        member __.clear(): Graphics = failwith \"JS only\"\n        member __.generateTexture(renderer: U2<WebGLRenderer, CanvasRenderer>, ?resolution: float, ?scaleMode: float): Texture = failwith \"JS only\"\n        member __.getBounds(?matrix: Matrix): Rectangle = failwith \"JS only\"\n        member __.containsPoint(point: Point): bool = failwith \"JS only\"\n        member __.updateLocalBounds(): unit = failwith \"JS only\"\n        member __.drawShape(shape: U4<Circle, Rectangle, Ellipse, Polygon>): GraphicsData = failwith \"JS only\"\n\n    and GraphicsRenderer =\n        abstract start: unit -> unit\n        abstract stop: unit -> unit\n        abstract flush: unit -> unit\n        abstract render: ?``object``: obj -> unit\n\n\n    and WebGLGraphicsData =\n        interface end\n\n    and [<Import(\"Point\",\"PIXI\")>] Point(?x: float, ?y: float) =\n        member __.x with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.y with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.clone(): Point = failwith \"JS only\"\n        member __.copy(p: Point): unit = failwith \"JS only\"\n        member __.equals(p: Point): bool = failwith \"JS only\"\n        member __.set(?x: float, ?y: float): unit = failwith \"JS only\"\n\n    and [<Import(\"Matrix\",\"PIXI\")>] Matrix() =\n        member __.a with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.b with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.c with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.d with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.tx with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.ty with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.IDENTITY with get(): Matrix = failwith \"JS only\" and set(v: Matrix): unit = failwith \"JS only\"\n        member __.TEMP_MATRIX with get(): Matrix = failwith \"JS only\" and set(v: Matrix): unit = failwith \"JS only\"\n        member __.fromArray(array: ResizeArray<float>): unit = failwith \"JS only\"\n        member __.toArray(?transpose: bool, ?out: ResizeArray<float>): ResizeArray<float> = failwith \"JS only\"\n        member __.apply(pos: Point, ?newPos: Point): Point = failwith \"JS only\"\n        member __.applyInverse(pos: Point, ?newPos: Point): Point = failwith \"JS only\"\n        member __.translate(x: float, y: float): Matrix = failwith \"JS only\"\n        member __.scale(x: float, y: float): Matrix = failwith \"JS only\"\n        member __.rotate(angle: float): Matrix = failwith \"JS only\"\n        member __.append(matrix: Matrix): Matrix = failwith \"JS only\"\n        member __.prepend(matrix: Matrix): Matrix = failwith \"JS only\"\n        member __.invert(): Matrix = failwith \"JS only\"\n        member __.identity(): Matrix = failwith \"JS only\"\n        member __.clone(): Matrix = failwith \"JS only\"\n        member __.copy(matrix: Matrix): Matrix = failwith \"JS only\"\n        member __.set(a: float, b: float, c: float, d: float, tx: float, ty: float): Matrix = failwith \"JS only\"\n        member __.setTransform(a: float, b: float, c: float, d: float, sr: float, cr: float, cy: float, sy: float, nsx: float, cs: float): Matrix = failwith \"JS only\"\n\n    and HitArea =\n        abstract contains: x: float * y: float -> bool\n\n    and [<Import(\"Circle\",\"PIXI\")>] Circle(?x: float, ?y: float, ?radius: float) =\n        interface HitArea with\n            member __.contains(x: float, y: float): bool = failwith \"JS only\"\n        member __.x with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.y with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.radius with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.``type`` with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.clone(): Circle = failwith \"JS only\"\n        member __.getBounds(): Rectangle = failwith \"JS only\"\n\n    and [<Import(\"Ellipse\",\"PIXI\")>] Ellipse(?x: float, ?y: float, ?width: float, ?height: float) =\n        interface HitArea with\n            member __.contains(x: float, y: float): bool = failwith \"JS only\"\n        member __.x with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.y with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.width with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.height with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.``type`` with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.clone(): Ellipse = failwith \"JS only\"\n        member __.getBounds(): Rectangle = failwith \"JS only\"\n\n    and [<Import(\"Polygon\",\"PIXI\")>] Polygon([<ParamArray>] points: float[]) =\n        interface HitArea with\n            member __.contains(x: float, y: float): bool = failwith \"JS only\"\n        member __.closed with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.points with get(): ResizeArray<float> = failwith \"JS only\" and set(v: ResizeArray<float>): unit = failwith \"JS only\"\n        member __.``type`` with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.clone(): Polygon = failwith \"JS only\"\n\n    and [<Import(\"Rectangle\",\"PIXI\")>] Rectangle(?x: float, ?y: float, ?width: float, ?height: float) =\n        interface HitArea with\n            member __.contains(x: float, y: float): bool = failwith \"JS only\"\n        member __.x with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.y with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.width with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.height with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.``type`` with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.EMPTY with get(): Rectangle = failwith \"JS only\" and set(v: Rectangle): unit = failwith \"JS only\"\n        member __.clone(): Rectangle = failwith \"JS only\"\n\n    and [<Import(\"RoundedRectangle\",\"PIXI\")>] RoundedRectangle(?x: float, ?y: float, ?width: float, ?height: float, ?radius: float) =\n        interface HitArea with\n            member __.contains(x: float, y: float): bool = failwith \"JS only\"\n        member __.x with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.y with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.width with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.height with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.radius with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.``type`` with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.EMPTY with get(): Rectangle = failwith \"JS only\" and set(v: Rectangle): unit = failwith \"JS only\"\n        member __.clone(): Rectangle = failwith \"JS only\"\n\n    and [<KeyValueList>]\n        ParticleContainerProperties =\n        | Scale of bool \n        | Position of bool\n        | Rotation of bool \n        | Uvs of bool\n        | Alpha of bool\n        \n    and [<Import(\"ParticleContainer\",\"PIXI\")>] ParticleContainer(?size: float, ?properties: ParticleContainerProperties list, ?batchSize: float) =\n        inherit Container()\n        member __._maxSize with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __._batchSize with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __._properties with get(): ResizeArray<bool> = failwith \"JS only\" and set(v: ResizeArray<bool>): unit = failwith \"JS only\"\n        member __._buffers with get(): ResizeArray<WebGLBuffer> = failwith \"JS only\" and set(v: ResizeArray<WebGLBuffer>): unit = failwith \"JS only\"\n        member __._bufferToUpdate with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.onChildrenChange with get(): Func<float, unit> = failwith \"JS only\" and set(v: Func<float, unit>): unit = failwith \"JS only\"\n        member __.interactiveChildren with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.blendMode with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.roundPixels with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.setProperties(properties: ParticleContainerProperties list): unit = failwith \"JS only\"\n\n    and ParticleBuffer =\n        abstract gl: WebGLRenderingContext with get, set\n        abstract vertSize: float with get, set\n        abstract vertByteSize: float with get, set\n        abstract size: float with get, set\n        abstract dynamicProperties: ResizeArray<obj> with get, set\n        abstract staticProperties: ResizeArray<obj> with get, set\n        abstract staticStride: float with get, set\n        abstract staticBuffer: obj with get, set\n        abstract staticData: obj with get, set\n        abstract dynamicStride: float with get, set\n        abstract dynamicBuffer: obj with get, set\n        abstract dynamicData: obj with get, set\n        abstract initBuffers: unit -> unit\n        abstract bind: unit -> unit\n        abstract destroy: unit -> unit\n\n    and ParticleRenderer =\n        interface end\n\n    and ParticleShader =\n        interface end\n\n    and [<KeyValueList>]\n        RendererOptions =\n        | View of HTMLCanvasElement\n        | Transparent of bool\n        | Antialias of bool\n        | AutoResize of bool\n        | Resolution of float\n        | ClearBeforeRendering of bool\n        | PreserveDrawingBuffer of bool\n        | ForceFXAA of bool\n        | RoundPixels of bool\n        | BackgroundColor of float\n\n    and [<Import(\"SystemRenderer\",\"PIXI\")>] SystemRenderer(system: string, ?width: float, ?height: float, ?options: RendererOptions list) =\n        inherit EventEmitter()\n        member __._backgroundColor with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __._backgroundColorRgb with get(): ResizeArray<float> = failwith \"JS only\" and set(v: ResizeArray<float>): unit = failwith \"JS only\"\n        member __._backgroundColorString with get(): string = failwith \"JS only\" and set(v: string): unit = failwith \"JS only\"\n        member __._tempDisplayObjectParent with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n        member __._lastObjectRendered with get(): DisplayObject = failwith \"JS only\" and set(v: DisplayObject): unit = failwith \"JS only\"\n        member __.``type`` with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.width with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.height with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.view with get(): HTMLCanvasElement = failwith \"JS only\" and set(v: HTMLCanvasElement): unit = failwith \"JS only\"\n        member __.resolution with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.transparent with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.autoResize with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.blendModes with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n        member __.preserveDrawingBuffer with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.clearBeforeRender with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.roundPixels with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.backgroundColor with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.render(``object``: DisplayObject): unit = failwith \"JS only\"\n        member __.resize(width: float, height: float): unit = failwith \"JS only\"\n        member __.destroy(?removeView: bool): unit = failwith \"JS only\"\n\n    and [<Import(\"CanvasRenderer\",\"PIXI\")>] CanvasRenderer(?width: float, ?height: float, ?options: RendererOptions list) =\n        inherit SystemRenderer(\"\")\n        member __.context with get(): CanvasRenderingContext2D = failwith \"JS only\" and set(v: CanvasRenderingContext2D): unit = failwith \"JS only\"\n        member __.refresh with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.maskManager with get(): CanvasMaskManager = failwith \"JS only\" and set(v: CanvasMaskManager): unit = failwith \"JS only\"\n        member __.roundPixels with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.smoothProperty with get(): string = failwith \"JS only\" and set(v: string): unit = failwith \"JS only\"\n        member __.renderDisplayObject(displayObject: DisplayObject, context: CanvasRenderingContext2D): unit = failwith \"JS only\"\n        member __._mapBlendModes(): unit = failwith \"JS only\"\n        member __.render(``object``: DisplayObject): unit = failwith \"JS only\"\n        member __.resize(w: float, h: float): unit = failwith \"JS only\"\n\n    and [<Import(\"CanvasBuffer\",\"PIXI\")>] CanvasBuffer(width: float, height: float) =\n        member __.canvas with get(): HTMLCanvasElement = failwith \"JS only\" and set(v: HTMLCanvasElement): unit = failwith \"JS only\"\n        member __.context with get(): CanvasRenderingContext2D = failwith \"JS only\" and set(v: CanvasRenderingContext2D): unit = failwith \"JS only\"\n        member __.width with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.height with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.clear(): unit = failwith \"JS only\"\n        member __.resize(width: float, height: float): unit = failwith \"JS only\"\n        member __.destroy(): unit = failwith \"JS only\"\n\n    and [<Import(\"CanvasGraphics\",\"PIXI\")>] CanvasGraphics() =\n        static member renderGraphicsMask(graphics: Graphics, context: CanvasRenderingContext2D): unit = failwith \"JS only\"\n        static member updateGraphicsTint(graphics: Graphics): unit = failwith \"JS only\"\n        static member renderGraphics(graphics: Graphics, context: CanvasRenderingContext2D): unit = failwith \"JS only\"\n\n    and [<Import(\"CanvasMaskManager\",\"PIXI\")>] CanvasMaskManager() =\n        member __.pushMask(maskData: obj, renderer: U2<WebGLRenderer, CanvasRenderer>): unit = failwith \"JS only\"\n        member __.popMask(renderer: U2<WebGLRenderer, CanvasRenderer>): unit = failwith \"JS only\"\n        member __.destroy(): unit = failwith \"JS only\"\n\n    and [<Import(\"CanvasTinter\",\"PIXI\")>] CanvasTinter() =\n        member __.cacheStepsPerColorChannel with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.convertTintToImage with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.vanUseMultiply with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.tintMethod with get(): Function = failwith \"JS only\" and set(v: Function): unit = failwith \"JS only\"\n        static member getTintedTexture(sprite: DisplayObject, color: float): HTMLCanvasElement = failwith \"JS only\"\n        static member tintWithMultiply(texture: Texture, color: float, canvas: HTMLDivElement): unit = failwith \"JS only\"\n        static member tintWithOverlay(texture: Texture, color: float, canvas: HTMLCanvasElement): unit = failwith \"JS only\"\n        static member tintWithPerPixel(texture: Texture, color: float, canvas: HTMLCanvasElement): unit = failwith \"JS only\"\n        static member roundColor(color: float): float = failwith \"JS only\"\n\n    and [<Import(\"WebGLRenderer\",\"PIXI\")>] WebGLRenderer(?width: float, ?height: float, ?options: RendererOptions list) =\n        inherit SystemRenderer(\"\")\n        member __._useFXAA with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __._FXAAFilter with get(): obj (* filters.FXAAFilter *) = failwith \"JS only\" and set(v: obj (* filters.FXAAFilter *)): unit = failwith \"JS only\"\n        member __._contextOptions with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n        member __._renderTargetStack with get(): ResizeArray<RenderTarget> = failwith \"JS only\" and set(v: ResizeArray<RenderTarget>): unit = failwith \"JS only\"\n        member __.handleContextLost with get(): Func<WebGLContextEvent, unit> = failwith \"JS only\" and set(v: Func<WebGLContextEvent, unit>): unit = failwith \"JS only\"\n        member __._managedTextures with get(): ResizeArray<Texture> = failwith \"JS only\" and set(v: ResizeArray<Texture>): unit = failwith \"JS only\"\n        member __.drawCount with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.shaderManager with get(): ShaderManager = failwith \"JS only\" and set(v: ShaderManager): unit = failwith \"JS only\"\n        member __.maskManager with get(): MaskManager = failwith \"JS only\" and set(v: MaskManager): unit = failwith \"JS only\"\n        member __.stencilManager with get(): StencilManager = failwith \"JS only\" and set(v: StencilManager): unit = failwith \"JS only\"\n        member __.filterManager with get(): FilterManager = failwith \"JS only\" and set(v: FilterManager): unit = failwith \"JS only\"\n        member __.blendModeManager with get(): BlendModeManager = failwith \"JS only\" and set(v: BlendModeManager): unit = failwith \"JS only\"\n        member __.currentRenderTarget with get(): RenderTarget = failwith \"JS only\" and set(v: RenderTarget): unit = failwith \"JS only\"\n        member __.currentRenderer with get(): ObjectRenderer = failwith \"JS only\" and set(v: ObjectRenderer): unit = failwith \"JS only\"\n        member __._initContext(): unit = failwith \"JS only\"\n        member __._createContext(): unit = failwith \"JS only\"\n        member __._mapGlModes(): unit = failwith \"JS only\"\n        member __.render(``object``: DisplayObject): unit = failwith \"JS only\"\n        member __.renderDisplayObject(displayObject: DisplayObject, renderTarget: RenderTarget, clear: bool): unit = failwith \"JS only\"\n        member __.setObjectRenderer(objectRenderer: ObjectRenderer): unit = failwith \"JS only\"\n        member __.setRenderTarget(renderTarget: RenderTarget): unit = failwith \"JS only\"\n        member __.updateTexture(texture: U2<BaseTexture, Texture>): U2<BaseTexture, Texture> = failwith \"JS only\"\n        member __.destroyTexture(texture: U2<BaseTexture, Texture>, ?_skipRemove: bool): unit = failwith \"JS only\"\n\n    and [<Import(\"AbstractFilter\",\"PIXI\")>] AbstractFilter(?vertexSrc: U2<string, ResizeArray<string>>, ?fragmentSrc: U2<string, ResizeArray<string>>, ?uniforms: obj) =\n        member __.vertexSrc with get(): ResizeArray<string> = failwith \"JS only\" and set(v: ResizeArray<string>): unit = failwith \"JS only\"\n        member __.fragmentSrc with get(): ResizeArray<string> = failwith \"JS only\" and set(v: ResizeArray<string>): unit = failwith \"JS only\"\n        member __.uniforms with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n        member __.padding with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.getShader(renderer: WebGLRenderer): Shader = failwith \"JS only\"\n        member __.applyFilter(renderer: WebGLRenderer, input: RenderTarget, output: RenderTarget, ?clear: bool): unit = failwith \"JS only\"\n        member __.syncUniform(uniform: WebGLUniformLocation): unit = failwith \"JS only\"\n\n    and [<Import(\"SpriteMaskFilter\",\"PIXI\")>] SpriteMaskFilter(sprite: Sprite) =\n        inherit AbstractFilter()\n        member __.maskSprite with get(): Sprite = failwith \"JS only\" and set(v: Sprite): unit = failwith \"JS only\"\n        member __.maskMatrix with get(): Matrix = failwith \"JS only\" and set(v: Matrix): unit = failwith \"JS only\"\n        member __.map with get(): Texture = failwith \"JS only\" and set(v: Texture): unit = failwith \"JS only\"\n        member __.offset with get(): Point = failwith \"JS only\" and set(v: Point): unit = failwith \"JS only\"\n        member __.applyFilter(renderer: WebGLRenderbuffer, input: RenderTarget, output: RenderTarget): unit = failwith \"JS only\"\n\n    and [<Import(\"BlendModeManager\",\"PIXI\")>] BlendModeManager(renderer: WebGLRenderer) =\n        inherit WebGLManager(unbox null)\n        member __.setBlendMode(blendMode: float): bool = failwith \"JS only\"\n\n    and [<Import(\"FilterManager\",\"PIXI\")>] FilterManager(renderer: WebGLRenderer) =\n        inherit WebGLManager(unbox null)\n        member __.filterStack with get(): ResizeArray<obj> = failwith \"JS only\" and set(v: ResizeArray<obj>): unit = failwith \"JS only\"\n        member __.renderer with get(): WebGLRenderer = failwith \"JS only\" and set(v: WebGLRenderer): unit = failwith \"JS only\"\n        member __.texturePool with get(): ResizeArray<obj> = failwith \"JS only\" and set(v: ResizeArray<obj>): unit = failwith \"JS only\"\n        member __.onContextChange with get(): Func<unit> = failwith \"JS only\" and set(v: Func<unit>): unit = failwith \"JS only\"\n        member __.setFilterStack(filterStack: ResizeArray<obj>): unit = failwith \"JS only\"\n        member __.pushFilter(target: RenderTarget, filters: ResizeArray<obj>): unit = failwith \"JS only\"\n        member __.popFilter(): AbstractFilter = failwith \"JS only\"\n        member __.getRenderTarget(?clear: bool): RenderTarget = failwith \"JS only\"\n        member __.returnRenderTarget(renderTarget: RenderTarget): unit = failwith \"JS only\"\n        member __.applyFilter(shader: U2<Shader, AbstractFilter>, inputTarget: RenderTarget, outputTarget: RenderTarget, ?clear: bool): unit = failwith \"JS only\"\n        member __.calculateMappedMatrix(filterArea: Rectangle, sprite: Sprite, ?outputMatrix: Matrix): Matrix = failwith \"JS only\"\n        member __.capFilterArea(filterArea: Rectangle): unit = failwith \"JS only\"\n        member __.resize(width: float, height: float): unit = failwith \"JS only\"\n        member __.destroy(): unit = failwith \"JS only\"\n\n    and [<Import(\"MaskManager\",\"PIXI\")>] MaskManager() =\n        inherit WebGLManager(unbox null)\n        member __.stencilStack with get(): StencilMaskStack = failwith \"JS only\" and set(v: StencilMaskStack): unit = failwith \"JS only\"\n        member __.reverse with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.count with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.alphaMaskPool with get(): ResizeArray<obj> = failwith \"JS only\" and set(v: ResizeArray<obj>): unit = failwith \"JS only\"\n        member __.pushMask(target: RenderTarget, maskData: obj): unit = failwith \"JS only\"\n        member __.popMask(target: RenderTarget, maskData: obj): unit = failwith \"JS only\"\n        member __.pushSpriteMask(target: RenderTarget, maskData: obj): unit = failwith \"JS only\"\n        member __.popSpriteMask(): unit = failwith \"JS only\"\n        member __.pushStencilMask(target: RenderTarget, maskData: obj): unit = failwith \"JS only\"\n        member __.popStencilMask(target: RenderTarget, maskData: obj): unit = failwith \"JS only\"\n\n    and [<Import(\"ShaderManager\",\"PIXI\")>] ShaderManager(renderer: WebGLRenderer) =\n        inherit WebGLManager(unbox null)\n        member __._currentId with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.currentShader with get(): Shader = failwith \"JS only\" and set(v: Shader): unit = failwith \"JS only\"\n        member __.maxAttibs with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.attribState with get(): ResizeArray<obj> = failwith \"JS only\" and set(v: ResizeArray<obj>): unit = failwith \"JS only\"\n        member __.tempAttribState with get(): ResizeArray<obj> = failwith \"JS only\" and set(v: ResizeArray<obj>): unit = failwith \"JS only\"\n        member __.stack with get(): ResizeArray<obj> = failwith \"JS only\" and set(v: ResizeArray<obj>): unit = failwith \"JS only\"\n        member __.setAttribs(attribs: ResizeArray<obj>): unit = failwith \"JS only\"\n        member __.setShader(shader: Shader): bool = failwith \"JS only\"\n        member __.destroy(): unit = failwith \"JS only\"\n\n    and [<Import(\"StencilManager\",\"PIXI\")>] StencilManager(renderer: WebGLRenderer) =\n        inherit WebGLManager(unbox null)\n        member __.setMaskStack(stencilMaskStack: StencilMaskStack): unit = failwith \"JS only\"\n        member __.pushStencil(graphics: Graphics, webGLData: WebGLGraphicsData): unit = failwith \"JS only\"\n        member __.bindGraphics(graphics: Graphics, webGLData: WebGLGraphicsData): unit = failwith \"JS only\"\n        member __.popStencil(graphics: Graphics, webGLData: WebGLGraphicsData): unit = failwith \"JS only\"\n        member __.destroy(): unit = failwith \"JS only\"\n        member __.pushMask(maskData: ResizeArray<obj>): unit = failwith \"JS only\"\n        member __.popMask(maskData: ResizeArray<obj>): unit = failwith \"JS only\"\n\n    and [<Import(\"WebGLManager\",\"PIXI\")>] WebGLManager(renderer: WebGLRenderer) =\n        member __.onContextChange with get(): Func<unit> = failwith \"JS only\" and set(v: Func<unit>): unit = failwith \"JS only\"\n        member __.renderer with get(): WebGLRenderer = failwith \"JS only\" and set(v: WebGLRenderer): unit = failwith \"JS only\"\n        member __.destroy(): unit = failwith \"JS only\"\n\n    and [<Import(\"Shader\",\"PIXI\")>] Shader(shaderManager: ShaderManager, vertexSrc: string, fragmentSrc: string, uniforms: obj, attributes: obj) =\n        member __.attributes with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n        member __.textureCount with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.uniforms with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n        member __.uuid with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.gl with get(): WebGLRenderingContext = failwith \"JS only\" and set(v: WebGLRenderingContext): unit = failwith \"JS only\"\n        member __.shaderManager with get(): ShaderManager = failwith \"JS only\" and set(v: ShaderManager): unit = failwith \"JS only\"\n        member __.program with get(): WebGLProgram = failwith \"JS only\" and set(v: WebGLProgram): unit = failwith \"JS only\"\n        member __.vertexSrc with get(): string = failwith \"JS only\" and set(v: string): unit = failwith \"JS only\"\n        member __.fragmentSrc with get(): string = failwith \"JS only\" and set(v: string): unit = failwith \"JS only\"\n        member __._glCompile(``type``: obj, src: obj): Shader = failwith \"JS only\"\n        member __.init(): unit = failwith \"JS only\"\n        member __.cacheUniformLocations(keys: ResizeArray<string>): unit = failwith \"JS only\"\n        member __.cacheAttributeLocations(keys: ResizeArray<string>): unit = failwith \"JS only\"\n        member __.compile(): WebGLProgram = failwith \"JS only\"\n        member __.syncUniform(uniform: obj): unit = failwith \"JS only\"\n        member __.syncUniforms(): unit = failwith \"JS only\"\n        member __.initSampler2D(uniform: obj): unit = failwith \"JS only\"\n        member __.destroy(): unit = failwith \"JS only\"\n\n    and [<Import(\"ComplexPrimitiveShader\",\"PIXI\")>] ComplexPrimitiveShader(shaderManager: ShaderManager) =\n        inherit Shader(unbox null, null, null, null, null)\n\n\n    and [<Import(\"PrimitiveShader\",\"PIXI\")>] PrimitiveShader(shaderManager: ShaderManager) =\n        inherit Shader(unbox null, null, null, null, null)\n\n\n    and [<Import(\"TextureShader\",\"PIXI\")>] TextureShader(shaderManager: ShaderManager, ?vertexSrc: string, ?fragmentSrc: string, ?customUniforms: obj, ?customAttributes: obj) =\n        inherit Shader(unbox null, null, null, null, null)\n\n\n    and StencilMaskStack =\n        abstract stencilStack: ResizeArray<obj> with get, set\n        abstract reverse: bool with get, set\n        abstract count: float with get, set\n\n    and [<Import(\"ObjectRenderer\",\"PIXI\")>] ObjectRenderer() =\n        inherit WebGLManager(unbox null)\n        member __.start(): unit = failwith \"JS only\"\n        member __.stop(): unit = failwith \"JS only\"\n        member __.flush(): unit = failwith \"JS only\"\n        member __.render(?``object``: obj): unit = failwith \"JS only\"\n\n    and [<Import(\"RenderTarget\",\"PIXI\")>] RenderTarget(gl: WebGLRenderingContext, width: float, height: float, scaleMode: float, resolution: float, root: bool) =\n        member __.gl with get(): WebGLRenderingContext = failwith \"JS only\" and set(v: WebGLRenderingContext): unit = failwith \"JS only\"\n        member __.frameBuffer with get(): WebGLFramebuffer = failwith \"JS only\" and set(v: WebGLFramebuffer): unit = failwith \"JS only\"\n        member __.texture with get(): Texture = failwith \"JS only\" and set(v: Texture): unit = failwith \"JS only\"\n        member __.size with get(): Rectangle = failwith \"JS only\" and set(v: Rectangle): unit = failwith \"JS only\"\n        member __.resolution with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.projectionMatrix with get(): Matrix = failwith \"JS only\" and set(v: Matrix): unit = failwith \"JS only\"\n        member __.transform with get(): Matrix = failwith \"JS only\" and set(v: Matrix): unit = failwith \"JS only\"\n        member __.frame with get(): Rectangle = failwith \"JS only\" and set(v: Rectangle): unit = failwith \"JS only\"\n        member __.stencilBuffer with get(): WebGLRenderbuffer = failwith \"JS only\" and set(v: WebGLRenderbuffer): unit = failwith \"JS only\"\n        member __.stencilMaskStack with get(): StencilMaskStack = failwith \"JS only\" and set(v: StencilMaskStack): unit = failwith \"JS only\"\n        member __.filterStack with get(): ResizeArray<obj> = failwith \"JS only\" and set(v: ResizeArray<obj>): unit = failwith \"JS only\"\n        member __.scaleMode with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.root with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.clear(?bind: bool): unit = failwith \"JS only\"\n        member __.attachStencilBuffer(): unit = failwith \"JS only\"\n        member __.activate(): unit = failwith \"JS only\"\n        member __.calculateProjection(protectionFrame: Matrix): unit = failwith \"JS only\"\n        member __.resize(width: float, height: float): unit = failwith \"JS only\"\n        member __.destroy(): unit = failwith \"JS only\"\n\n    and Quad =\n        abstract gl: WebGLRenderingContext with get, set\n        abstract vertices: ResizeArray<float> with get, set\n        abstract uvs: ResizeArray<float> with get, set\n        abstract colors: ResizeArray<float> with get, set\n        abstract indices: ResizeArray<float> with get, set\n        abstract vertexBuffer: WebGLBuffer with get, set\n        abstract indexBuffer: WebGLBuffer with get, set\n        abstract map: rect: Rectangle * rect2: Rectangle -> unit\n        abstract upload: unit -> unit\n        abstract destroy: unit -> unit\n\n    and [<Import(\"Sprite\",\"PIXI\")>] Sprite(?texture: Texture) =\n        inherit Container()\n        member __._texture with get(): Texture = failwith \"JS only\" and set(v: Texture): unit = failwith \"JS only\"\n        member __._width with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __._height with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.cachedTint with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.anchor with get(): Point = failwith \"JS only\" and set(v: Point): unit = failwith \"JS only\"\n        member __.tint with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.blendMode with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.shader with get(): U2<Shader, AbstractFilter> = failwith \"JS only\" and set(v: U2<Shader, AbstractFilter>): unit = failwith \"JS only\"\n        member __.texture with get(): Texture = failwith \"JS only\" and set(v: Texture): unit = failwith \"JS only\"\n        member __.width with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.height with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        static member fromFrame(frameId: string): Sprite = failwith \"JS only\"\n        static member fromImage(imageId: string, ?crossorigin: bool, ?scaleMode: float): Sprite = failwith \"JS only\"\n        member __._onTextureUpdate(): unit = failwith \"JS only\"\n        member __.getBounds(?matrix: Matrix): Rectangle = failwith \"JS only\"\n        member __.getLocalBounds(): Rectangle = failwith \"JS only\"\n        member __.containsPoint(point: Point): bool = failwith \"JS only\"\n        member __.destroy(?destroyTexture: bool, ?destroyBaseTexture: bool): unit = failwith \"JS only\"\n\n    and [<Import(\"SpriteRenderer\",\"PIXI\")>] SpriteRenderer() =\n        inherit ObjectRenderer()\n        member __.vertSize with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.vertByteSize with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.size with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.vertices with get(): ResizeArray<float> = failwith \"JS only\" and set(v: ResizeArray<float>): unit = failwith \"JS only\"\n        member __.positions with get(): ResizeArray<float> = failwith \"JS only\" and set(v: ResizeArray<float>): unit = failwith \"JS only\"\n        member __.colors with get(): ResizeArray<float> = failwith \"JS only\" and set(v: ResizeArray<float>): unit = failwith \"JS only\"\n        member __.indices with get(): ResizeArray<float> = failwith \"JS only\" and set(v: ResizeArray<float>): unit = failwith \"JS only\"\n        member __.currentBatchSize with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.sprites with get(): ResizeArray<Sprite> = failwith \"JS only\" and set(v: ResizeArray<Sprite>): unit = failwith \"JS only\"\n        member __.shader with get(): U2<Shader, AbstractFilter> = failwith \"JS only\" and set(v: U2<Shader, AbstractFilter>): unit = failwith \"JS only\"\n        member __.renderBatch(texture: Texture, size: float, startIndex: float): unit = failwith \"JS only\"\n        member __.render(sprite: Sprite): unit = failwith \"JS only\"\n        member __.flush(): unit = failwith \"JS only\"\n        member __.start(): unit = failwith \"JS only\"\n        member __.destroy(): unit = failwith \"JS only\"\n\n    and [<KeyValueList>] \n        TextStyle =\n        | Font of string\n        | Fill of U2<string,float>\n        | Align of string\n        | Stroke of U2<string,float>\n        | StrokeThickness of float\n        | WordWrap of bool\n        | WordWrapWidth of float\n        | LineHeight of float \n        | DropShadow of bool \n        | DropShadowColor of U2<string, float> \n        | DropShadowAngle of float \n        | DropShadowDistance of float \n        | Padding of float \n        | TextBaseline of string \n        | LineJoin of string \n        | MiterLimit of float \n        \n    and [<Import(\"Text\",\"PIXI\")>] Text(?text: string, ?style: TextStyle list, ?resolution: float) =\n        inherit Sprite()\n        member __.fontPropertiesCache with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n        member __.fontPropertiesCanvas with get(): HTMLCanvasElement = failwith \"JS only\" and set(v: HTMLCanvasElement): unit = failwith \"JS only\"\n        member __.fontPropertiesContext with get(): CanvasRenderingContext2D = failwith \"JS only\" and set(v: CanvasRenderingContext2D): unit = failwith \"JS only\"\n        member __._text with get(): string = failwith \"JS only\" and set(v: string): unit = failwith \"JS only\"\n        member __._style with get(): TextStyle list = failwith \"JS only\" and set(v: TextStyle list): unit = failwith \"JS only\"\n        member __.canvas with get(): HTMLCanvasElement = failwith \"JS only\" and set(v: HTMLCanvasElement): unit = failwith \"JS only\"\n        member __.context with get(): CanvasRenderingContext2D = failwith \"JS only\" and set(v: CanvasRenderingContext2D): unit = failwith \"JS only\"\n        member __.dirty with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.resolution with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.text with get(): string = failwith \"JS only\" and set(v: string): unit = failwith \"JS only\"\n        member __.style with get(): TextStyle list = failwith \"JS only\" and set(v: TextStyle list): unit = failwith \"JS only\"\n        member __.width with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.height with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.updateText(): unit = failwith \"JS only\"\n        member __.updateTexture(): unit = failwith \"JS only\"\n        member __.determineFontProperties(fontStyle: TextStyle list): TextStyle list = failwith \"JS only\"\n        member __.wordWrap(text: string): bool = failwith \"JS only\"\n\n    and [<Import(\"BaseTexture\",\"PIXI\")>] BaseTexture(source: U2<HTMLImageElement, HTMLCanvasElement>, ?scaleMode: float, ?resolution: float) =\n        inherit EventEmitter()\n        member __._glTextures with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n        member __.uuid with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.resolution with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.width with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.height with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.realWidth with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.realHeight with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.scaleMode with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.hasLoaded with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.isLoading with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.source with get(): U3<HTMLImageElement, HTMLCanvasElement, HTMLVideoElement> = failwith \"JS only\" and set(v: U3<HTMLImageElement, HTMLCanvasElement, HTMLVideoElement>): unit = failwith \"JS only\"\n        member __.premultipliedAlpha with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.imageUrl with get(): string = failwith \"JS only\" and set(v: string): unit = failwith \"JS only\"\n        member __.isPowerOfTwo with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.mipmap with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        static member fromImage(imageUrl: string, ?crossorigin: bool, ?scaleMode: float): BaseTexture = failwith \"JS only\"\n        static member fromCanvas(canvas: HTMLCanvasElement, ?scaleMode: float): BaseTexture = failwith \"JS only\"\n        member __._sourceLoaded(): unit = failwith \"JS only\"\n        member __.update(): unit = failwith \"JS only\"\n        member __.loadSource(source: U2<HTMLImageElement, HTMLCanvasElement>): unit = failwith \"JS only\"\n        member __.destroy(): unit = failwith \"JS only\"\n        member __.dispose(): unit = failwith \"JS only\"\n        member __.updateSourceImage(newSrc: string): unit = failwith \"JS only\"\n        [<Emit(\"$0.on('dispose',$1...)\")>] member __.on_dispose(fn: Func<BaseTexture, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.on('error',$1...)\")>] member __.on_error(fn: Func<BaseTexture, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.on('loaded',$1...)\")>] member __.on_loaded(fn: Func<BaseTexture, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.on('update',$1...)\")>] member __.on_update(fn: Func<BaseTexture, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        member __.on(``event``: string, fn: Function, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.once('dispose',$1...)\")>] member __.once_dispose(fn: Func<BaseTexture, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.once('error',$1...)\")>] member __.once_error(fn: Func<BaseTexture, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.once('loaded',$1...)\")>] member __.once_loaded(fn: Func<BaseTexture, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        [<Emit(\"$0.once('update',$1...)\")>] member __.once_update(fn: Func<BaseTexture, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n        member __.once(``event``: string, fn: Function, ?context: obj): EventEmitter = failwith \"JS only\"\n\n    and [<Import(\"RenderTexture\",\"PIXI\")>] RenderTexture(renderer: U2<CanvasRenderer, WebGLRenderer>, ?width: float, ?height: float, ?scaleMode: float, ?resolution: float) =\n        inherit Texture(unbox null)\n        member __.width with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.height with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.resolution with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.renderer with get(): U2<CanvasRenderer, WebGLRenderer> = failwith \"JS only\" and set(v: U2<CanvasRenderer, WebGLRenderer>): unit = failwith \"JS only\"\n        member __.valid with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.renderWebGL(displayObject: DisplayObject, ?matrix: Matrix, ?clear: bool, ?updateTransform: bool): unit = failwith \"JS only\"\n        member __.renderCanvas(displayObject: DisplayObject, ?matrix: Matrix, ?clear: bool, ?updateTransform: bool): unit = failwith \"JS only\"\n        member __.render(displayObject: DisplayObject, ?matrix: Matrix, ?clear: bool, ?updateTransform: bool): unit = failwith \"JS only\"\n        member __.resize(width: float, height: float, ?updateBase: bool): unit = failwith \"JS only\"\n        member __.clear(): unit = failwith \"JS only\"\n        member __.destroy(): unit = failwith \"JS only\"\n        member __.getImage(): HTMLImageElement = failwith \"JS only\"\n        member __.getPixels(): ResizeArray<float> = failwith \"JS only\"\n        member __.getPixel(x: float, y: float): ResizeArray<float> = failwith \"JS only\"\n        member __.getBase64(): string = failwith \"JS only\"\n        member __.getCanvas(): HTMLCanvasElement = failwith \"JS only\"\n\n    and [<Import(\"Texture\",\"PIXI\")>] Texture(baseTexture: BaseTexture, ?frame: Rectangle, ?crop: Rectangle, ?trim: Rectangle, ?rotate: float) =\n        inherit BaseTexture(unbox null)\n        member __.EMPTY with get(): Texture = failwith \"JS only\" and set(v: Texture): unit = failwith \"JS only\"\n        member __._frame with get(): Rectangle = failwith \"JS only\" and set(v: Rectangle): unit = failwith \"JS only\"\n        member __._uvs with get(): TextureUvs = failwith \"JS only\" and set(v: TextureUvs): unit = failwith \"JS only\"\n        member __.noFrame with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.baseTexture with get(): BaseTexture = failwith \"JS only\" and set(v: BaseTexture): unit = failwith \"JS only\"\n        member __.trim with get(): Rectangle = failwith \"JS only\" and set(v: Rectangle): unit = failwith \"JS only\"\n        member __.valid with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.requiresUpdate with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.width with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.height with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.crop with get(): Rectangle = failwith \"JS only\" and set(v: Rectangle): unit = failwith \"JS only\"\n        member __.rotate with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.frame with get(): Rectangle = failwith \"JS only\" and set(v: Rectangle): unit = failwith \"JS only\"\n        static member fromImage(imageUrl: string, ?crossOrigin: bool, ?scaleMode: float): Texture = failwith \"JS only\"\n        static member fromFrame(frameId: string): Texture = failwith \"JS only\"\n        static member fromCanvas(canvas: HTMLCanvasElement, ?scaleMode: float): Texture = failwith \"JS only\"\n        static member fromVideo(video: U2<HTMLVideoElement, string>, ?scaleMode: float): Texture = failwith \"JS only\"\n        static member fromVideoUrl(videoUrl: string, ?scaleMode: float): Texture = failwith \"JS only\"\n        static member addTextureToCache(texture: Texture, id: string): unit = failwith \"JS only\"\n        static member removeTextureFromCache(id: string): Texture = failwith \"JS only\"\n        member __.onBaseTextureUpdated(baseTexture: BaseTexture): unit = failwith \"JS only\"\n        member __.onBaseTextureLoaded(baseTexture: BaseTexture): unit = failwith \"JS only\"\n        member __._updateUvs(): unit = failwith \"JS only\"\n        member __.update(): unit = failwith \"JS only\"\n        member __.destroy(?destroyBase: bool): unit = failwith \"JS only\"\n        member __.clone(): Texture = failwith \"JS only\"\n\n    and [<Import(\"TextureUvs\",\"PIXI\")>] TextureUvs() =\n        member __.x0 with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.y0 with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.x1 with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.y1 with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.x2 with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.y2 with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.x3 with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.y3 with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        member __.set(frame: Rectangle, baseFrame: Rectangle, rotate: bool): unit = failwith \"JS only\"\n\n    and [<Import(\"VideoBaseTexture\",\"PIXI\")>] VideoBaseTexture(source: HTMLVideoElement, ?scaleMode: float) =\n        inherit BaseTexture(unbox null)\n        member __._loaded with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        member __.autoUpdate with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n        static member fromVideo(video: HTMLVideoElement, ?scaleMode: float): VideoBaseTexture = failwith \"JS only\"\n        static member fromUrl(videoSrc: U4<string, obj, ResizeArray<string>, ResizeArray<obj>>): VideoBaseTexture = failwith \"JS only\"\n        member __._onUpdate(): unit = failwith \"JS only\"\n        member __._onPlayStart(): unit = failwith \"JS only\"\n        member __._onPlayStop(): unit = failwith \"JS only\"\n        member __._onCanPlay(): unit = failwith \"JS only\"\n        member __.destroy(): unit = failwith \"JS only\"\n\n    and [<Import(\"utils\",\"PIXI\")>] utils() =\n        member __.TextureCache with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n        member __.BaseTextureCache with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n        static member uuid(): float = failwith \"JS only\"\n        static member hex2rgb(hex: float, ?out: ResizeArray<float>): ResizeArray<float> = failwith \"JS only\"\n        static member hex2String(hex: float): string = failwith \"JS only\"\n        static member rgb2hex(rgb: ResizeArray<float>): float = failwith \"JS only\"\n        static member canUseNewCanvasBlendModel(): bool = failwith \"JS only\"\n        static member getNextPowerOfTwo(number: float): float = failwith \"JS only\"\n        static member isPowerOfTwo(width: float, height: float): bool = failwith \"JS only\"\n        static member getResolutionOfUrl(url: string): float = failwith \"JS only\"\n        static member sayHello(``type``: string): unit = failwith \"JS only\"\n        static member isWebGLSupported(): bool = failwith \"JS only\"\n        static member sign(n: float): float = failwith \"JS only\"\n\n    and [<Import(\"GroupD8\",\"PIXI\")>] GroupD8 =\n        static member E with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        static member MIRROR_HORIZONTAL with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        static member MIRROR_VERTICAL with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        static member N with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        static member NE with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        static member NW with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        static member S with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        static member SE with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        static member SW with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        static member W with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n        static member add(rotationSecond: float, rotationFirst: float): float = failwith \"JS only\"\n        static member byDirection(dx: float, dy: float): float = failwith \"JS only\"\n        static member inv(rotation: float): float = failwith \"JS only\"\n        static member isSwapWidthHeight(rotation: float): bool = failwith \"JS only\"\n        static member matrixAppendRotationInv(matrix: Matrix, rotation: float, tx: float, ty: float): unit = failwith \"JS only\"\n        static member rotate180(rotation: float): float = failwith \"JS only\"\n        static member sub(rotationSecond: float, rotationFirst: float): float = failwith \"JS only\"\n        static member uX(ind: float): float = failwith \"JS only\"\n        static member uY(ind: float): float = failwith \"JS only\"\n        static member vX(ind: float): float = failwith \"JS only\"\n        static member vY(ind: float): float = failwith \"JS only\"\n\n    module extras =\n\n        [<KeyValueList>]\n        type BitmapTextStyle =\n            | Font of U2<string, obj>\n            | Align of string \n            | Tint of float \n\n        and [<Import(\"extras.BitmapText\",\"PIXI\")>] BitmapText(text: string, ?style: BitmapTextStyle list) =\n            inherit Container()\n            member __.fonts with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n            member __._glyphs with get(): ResizeArray<Sprite> = failwith \"JS only\" and set(v: ResizeArray<Sprite>): unit = failwith \"JS only\"\n            member __._font with get(): U2<string, obj> = failwith \"JS only\" and set(v: U2<string, obj>): unit = failwith \"JS only\"\n            member __._text with get(): string = failwith \"JS only\" and set(v: string): unit = failwith \"JS only\"\n            member __.textWidth with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.textHeight with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.maxWidth with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.maxLineHeight with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.dirty with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n            member __.tint with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.align with get(): string = failwith \"JS only\" and set(v: string): unit = failwith \"JS only\"\n            member __.font with get(): U2<string, obj> = failwith \"JS only\" and set(v: U2<string, obj>): unit = failwith \"JS only\"\n            member __.text with get(): string = failwith \"JS only\" and set(v: string): unit = failwith \"JS only\"\n            member __.updateText(): unit = failwith \"JS only\"\n\n        and [<Import(\"extras.MovieClip\",\"PIXI\")>] MovieClip(textures: ResizeArray<Texture>) =\n            inherit Sprite()\n            member __._textures with get(): ResizeArray<Texture> = failwith \"JS only\" and set(v: ResizeArray<Texture>): unit = failwith \"JS only\"\n            member __._durations with get(): ResizeArray<float> = failwith \"JS only\" and set(v: ResizeArray<float>): unit = failwith \"JS only\"\n            member __._currentTime with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.animationSpeed with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.loop with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n            member __.onComplete with get(): Func<unit> = failwith \"JS only\" and set(v: Func<unit>): unit = failwith \"JS only\"\n            member __.currentFrame with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.playing with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n            member __.totalFrames with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.textures with get(): ResizeArray<Texture> = failwith \"JS only\" and set(v: ResizeArray<Texture>): unit = failwith \"JS only\"\n            static member fromFrames(frame: ResizeArray<string>): MovieClip = failwith \"JS only\"\n            static member fromImages(images: ResizeArray<string>): MovieClip = failwith \"JS only\"\n            member __.update(deltaTime: float): unit = failwith \"JS only\"\n            member __.stop(): unit = failwith \"JS only\"\n            member __.play(): unit = failwith \"JS only\"\n            member __.gotoAndStop(frameName: float): unit = failwith \"JS only\"\n            member __.gotoAndPlay(frameName: float): unit = failwith \"JS only\"\n            member __.destroy(): unit = failwith \"JS only\"\n\n        and [<Import(\"extras.TilingSprite\",\"PIXI\")>] TilingSprite(texture: Texture, width: float, height: float) =\n            inherit Sprite()\n            member __._tileScaleOffset with get(): Point = failwith \"JS only\" and set(v: Point): unit = failwith \"JS only\"\n            member __._tilingTexture with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n            member __._refreshTexture with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n            member __._uvs with get(): ResizeArray<TextureUvs> = failwith \"JS only\" and set(v: ResizeArray<TextureUvs>): unit = failwith \"JS only\"\n            member __.tileScale with get(): Point = failwith \"JS only\" and set(v: Point): unit = failwith \"JS only\"\n            member __.tilePosition with get(): Point = failwith \"JS only\" and set(v: Point): unit = failwith \"JS only\"\n            member __.width with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.height with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.originalTexture with get(): Texture = failwith \"JS only\" and set(v: Texture): unit = failwith \"JS only\"\n            static member fromFrame(frameId: string): Sprite = failwith \"JS only\"\n            static member fromImage(imageId: string, ?crossorigin: bool, ?scaleMode: float): Sprite = failwith \"JS only\"\n            static member fromFrame(frameId: string, ?width: float, ?height: float): TilingSprite = failwith \"JS only\"\n            static member fromImage(imageId: string, ?width: float, ?height: float, ?crossorigin: bool, ?scaleMode: float): TilingSprite = failwith \"JS only\"\n            member __.getBounds(): Rectangle = failwith \"JS only\"\n            member __.generateTilingTexture(renderer: U2<WebGLRenderer, CanvasRenderer>, texture: Texture, ?forcePowerOfTwo: bool): Texture = failwith \"JS only\"\n            member __.containsPoint(point: Point): bool = failwith \"JS only\"\n            member __.destroy(): unit = failwith \"JS only\"\n\n\n\n    module filters =\n        type [<Import(\"filters.AsciiFilter\",\"PIXI\")>] AsciiFilter() =\n            inherit AbstractFilter()\n            member __.size with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.BloomFilter\",\"PIXI\")>] BloomFilter() =\n            inherit AbstractFilter()\n            member __.blur with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.blurX with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.blurY with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.BlurFilter\",\"PIXI\")>] BlurFilter() =\n            inherit AbstractFilter()\n            member __.blurXFilter with get(): BlurXFilter = failwith \"JS only\" and set(v: BlurXFilter): unit = failwith \"JS only\"\n            member __.blurYFilter with get(): BlurYFilter = failwith \"JS only\" and set(v: BlurYFilter): unit = failwith \"JS only\"\n            member __.blur with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.passes with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.blurX with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.blurY with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.BlurXFilter\",\"PIXI\")>] BlurXFilter() =\n            inherit AbstractFilter()\n            member __.passes with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.strength with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.blur with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.BlurYFilter\",\"PIXI\")>] BlurYFilter() =\n            inherit AbstractFilter()\n            member __.passes with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.strength with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.blur with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.SmartBlurFilter\",\"PIXI\")>] SmartBlurFilter() =\n            inherit AbstractFilter()\n\n\n        and [<Import(\"filters.ColorMatrixFilter\",\"PIXI\")>] ColorMatrixFilter() =\n            inherit AbstractFilter()\n            member __.matrix with get(): ResizeArray<float> = failwith \"JS only\" and set(v: ResizeArray<float>): unit = failwith \"JS only\"\n            member __._loadMatrix(matrix: ResizeArray<float>, multiply: bool): unit = failwith \"JS only\"\n            member __._multiply(out: ResizeArray<float>, a: ResizeArray<float>, b: ResizeArray<float>): unit = failwith \"JS only\"\n            member __._colorMatrix(matrix: ResizeArray<float>): unit = failwith \"JS only\"\n            member __.brightness(b: float, ?multiply: bool): unit = failwith \"JS only\"\n            member __.greyscale(scale: float, ?multiply: bool): unit = failwith \"JS only\"\n            member __.blackAndWhite(?multiply: bool): unit = failwith \"JS only\"\n            member __.hue(rotation: float, ?multiply: bool): unit = failwith \"JS only\"\n            member __.contrast(amount: float, ?multiply: bool): unit = failwith \"JS only\"\n            member __.saturate(amount: float, ?multiply: bool): unit = failwith \"JS only\"\n            member __.desaturate(?multiply: bool): unit = failwith \"JS only\"\n            member __.negative(?multiply: bool): unit = failwith \"JS only\"\n            member __.sepia(?multiply: bool): unit = failwith \"JS only\"\n            member __.technicolor(?multiply: bool): unit = failwith \"JS only\"\n            member __.polaroid(?multiply: bool): unit = failwith \"JS only\"\n            member __.toBGR(?multiply: bool): unit = failwith \"JS only\"\n            member __.kodachrome(?multiply: bool): unit = failwith \"JS only\"\n            member __.browni(?multiply: bool): unit = failwith \"JS only\"\n            member __.vintage(?multiply: bool): unit = failwith \"JS only\"\n            member __.colorTone(desaturation: float, toned: float, lightColor: string, darkColor: string, ?multiply: bool): unit = failwith \"JS only\"\n            member __.night(intensity: float, ?multiply: bool): unit = failwith \"JS only\"\n            member __.predator(amount: float, ?multiply: bool): unit = failwith \"JS only\"\n            member __.lsd(?multiply: bool): unit = failwith \"JS only\"\n            member __.reset(): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.ColorStepFilter\",\"PIXI\")>] ColorStepFilter() =\n            inherit AbstractFilter()\n            member __.step with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.ConvolutionFilter\",\"PIXI\")>] ConvolutionFilter(matrix: ResizeArray<float>, width: float, height: float) =\n            inherit AbstractFilter()\n            member __.matrix with get(): ResizeArray<float> = failwith \"JS only\" and set(v: ResizeArray<float>): unit = failwith \"JS only\"\n            member __.width with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.height with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.CrossHatchFilter\",\"PIXI\")>] CrossHatchFilter() =\n            inherit AbstractFilter()\n\n\n        and [<Import(\"filters.DisplacementFilter\",\"PIXI\")>] DisplacementFilter(sprite: Sprite, ?scale: float) =\n            inherit AbstractFilter()\n            member __.map with get(): Texture = failwith \"JS only\" and set(v: Texture): unit = failwith \"JS only\"\n            member __.scale with get(): Point = failwith \"JS only\" and set(v: Point): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.DotScreenFilter\",\"PIXI\")>] DotScreenFilter() =\n            inherit AbstractFilter()\n            member __.scale with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.angle with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.BlurYTintFilter\",\"PIXI\")>] BlurYTintFilter() =\n            inherit AbstractFilter()\n            member __.blur with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.DropShadowFilter\",\"PIXI\")>] DropShadowFilter() =\n            inherit AbstractFilter()\n            member __.blur with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.blurX with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.blurY with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.color with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.alpha with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.distance with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.angle with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.GrayFilter\",\"PIXI\")>] GrayFilter() =\n            inherit AbstractFilter()\n            member __.gray with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.InvertFilter\",\"PIXI\")>] InvertFilter() =\n            inherit AbstractFilter()\n            member __.invert with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.NoiseFilter\",\"PIXI\")>] NoiseFilter() =\n            inherit AbstractFilter()\n            member __.noise with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.PixelateFilter\",\"PIXI\")>] PixelateFilter() =\n            inherit AbstractFilter()\n            member __.size with get(): Point = failwith \"JS only\" and set(v: Point): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.RGBSplitFilter\",\"PIXI\")>] RGBSplitFilter() =\n            inherit AbstractFilter()\n            member __.red with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.green with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.blue with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.SepiaFilter\",\"PIXI\")>] SepiaFilter() =\n            inherit AbstractFilter()\n            member __.sepia with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.ShockwaveFilter\",\"PIXI\")>] ShockwaveFilter() =\n            inherit AbstractFilter()\n            member __.center with get(): ResizeArray<float> = failwith \"JS only\" and set(v: ResizeArray<float>): unit = failwith \"JS only\"\n            member __.``params`` with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n            member __.time with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.TiltShiftAxisFilter\",\"PIXI\")>] TiltShiftAxisFilter() =\n            inherit AbstractFilter()\n            member __.blur with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.gradientBlur with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.start with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.``end`` with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.updateDelta(): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.TiltShiftFilter\",\"PIXI\")>] TiltShiftFilter() =\n            inherit AbstractFilter()\n            member __.blur with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.gradientBlur with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.start with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.``end`` with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.TiltShiftXFilter\",\"PIXI\")>] TiltShiftXFilter() =\n            inherit AbstractFilter()\n            member __.updateDelta(): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.TiltShiftYFilter\",\"PIXI\")>] TiltShiftYFilter() =\n            inherit AbstractFilter()\n            member __.updateDelta(): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.TwistFilter\",\"PIXI\")>] TwistFilter() =\n            inherit AbstractFilter()\n            member __.offset with get(): Point = failwith \"JS only\" and set(v: Point): unit = failwith \"JS only\"\n            member __.radius with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.angle with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n\n        and [<Import(\"filters.FXAAFilter\",\"PIXI\")>] FXAAFilter() =\n            inherit AbstractFilter()\n            member __.applyFilter(renderer: WebGLRenderer, input: RenderTarget, output: RenderTarget): unit = failwith \"JS only\"\n\n\n\n    module interaction =\n        type [<Import(\"interaction.InteractionData\",\"PIXI\")>] InteractionData() =\n            member __.``global`` with get(): Point = failwith \"JS only\" and set(v: Point): unit = failwith \"JS only\"\n            member __.target with get(): DisplayObject = failwith \"JS only\" and set(v: DisplayObject): unit = failwith \"JS only\"\n            member __.originalEvent with get(): Event = failwith \"JS only\" and set(v: Event): unit = failwith \"JS only\"\n            member __.getLocalPosition(displayObject: DisplayObject, ?point: Point, ?globalPos: Point): Point = failwith \"JS only\"\n\n        and [<Import(\"interaction.InteractionManager\",\"PIXI\")>] InteractionManager(renderer: U2<CanvasRenderer, WebGLRenderer>, ?options: obj) =\n            member __.interactionDOMElement with get(): HTMLElement = failwith \"JS only\" and set(v: HTMLElement): unit = failwith \"JS only\"\n            member __.eventsAdded with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n            member __._tempPoint with get(): Point = failwith \"JS only\" and set(v: Point): unit = failwith \"JS only\"\n            member __.onMouseDown with get(): Func<Event, unit> = failwith \"JS only\" and set(v: Func<Event, unit>): unit = failwith \"JS only\"\n            member __.processMouseDown with get(): Func<DisplayObject, bool, unit> = failwith \"JS only\" and set(v: Func<DisplayObject, bool, unit>): unit = failwith \"JS only\"\n            member __.onMouseUp with get(): Func<Event, unit> = failwith \"JS only\" and set(v: Func<Event, unit>): unit = failwith \"JS only\"\n            member __.processMouseUp with get(): Func<DisplayObject, bool, unit> = failwith \"JS only\" and set(v: Func<DisplayObject, bool, unit>): unit = failwith \"JS only\"\n            member __.onMouseMove with get(): Func<Event, unit> = failwith \"JS only\" and set(v: Func<Event, unit>): unit = failwith \"JS only\"\n            member __.processMouseMove with get(): Func<DisplayObject, bool, unit> = failwith \"JS only\" and set(v: Func<DisplayObject, bool, unit>): unit = failwith \"JS only\"\n            member __.onMouseOut with get(): Func<Event, unit> = failwith \"JS only\" and set(v: Func<Event, unit>): unit = failwith \"JS only\"\n            member __.processMouseOverOut with get(): Func<DisplayObject, bool, unit> = failwith \"JS only\" and set(v: Func<DisplayObject, bool, unit>): unit = failwith \"JS only\"\n            member __.onTouchStart with get(): Func<Event, unit> = failwith \"JS only\" and set(v: Func<Event, unit>): unit = failwith \"JS only\"\n            member __.processTouchStart with get(): Func<DisplayObject, bool, unit> = failwith \"JS only\" and set(v: Func<DisplayObject, bool, unit>): unit = failwith \"JS only\"\n            member __.onTouchEnd with get(): Func<Event, unit> = failwith \"JS only\" and set(v: Func<Event, unit>): unit = failwith \"JS only\"\n            member __.processTouchEnd with get(): Func<DisplayObject, bool, unit> = failwith \"JS only\" and set(v: Func<DisplayObject, bool, unit>): unit = failwith \"JS only\"\n            member __.onTouchMove with get(): Func<Event, unit> = failwith \"JS only\" and set(v: Func<Event, unit>): unit = failwith \"JS only\"\n            member __.processTouchMove with get(): Func<DisplayObject, bool, unit> = failwith \"JS only\" and set(v: Func<DisplayObject, bool, unit>): unit = failwith \"JS only\"\n            member __.renderer with get(): U2<CanvasRenderer, WebGLRenderer> = failwith \"JS only\" and set(v: U2<CanvasRenderer, WebGLRenderer>): unit = failwith \"JS only\"\n            member __.autoPreventDefault with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n            member __.interactionFrequency with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.mouse with get(): InteractionData = failwith \"JS only\" and set(v: InteractionData): unit = failwith \"JS only\"\n            member __.eventData with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n            member __.interactiveDataPool with get(): ResizeArray<InteractionData> = failwith \"JS only\" and set(v: ResizeArray<InteractionData>): unit = failwith \"JS only\"\n            member __.last with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.currentCursorStyle with get(): string = failwith \"JS only\" and set(v: string): unit = failwith \"JS only\"\n            member __.resolution with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.setTargetElement(element: HTMLElement, resolution: float): unit = failwith \"JS only\"\n            member __.addEvents(): unit = failwith \"JS only\"\n            member __.removeEvents(): unit = failwith \"JS only\"\n            member __.dispatchEvent(displayObject: DisplayObject, eventString: string, eventData: obj): unit = failwith \"JS only\"\n            member __.getTouchData(touchEvent: InteractionData): InteractionData = failwith \"JS only\"\n            member __.returnTouchData(touchData: InteractionData): unit = failwith \"JS only\"\n            member __.update(deltaTime: float): unit = failwith \"JS only\"\n            member __.mapPositionToPoint(point: Point, x: float, y: float): unit = failwith \"JS only\"\n            member __.processInteractive(point: Point, displayObject: DisplayObject, func: Func<DisplayObject, bool, unit>, hitTest: bool, interactive: bool): bool = failwith \"JS only\"\n            member __.destroy(): unit = failwith \"JS only\"\n\n        and InteractiveTarget =\n            abstract interactive: bool with get, set\n            abstract buttonMode: bool with get, set\n            abstract interactiveChildren: bool with get, set\n            abstract defaultCursor: string with get, set\n            abstract hitArea: HitArea with get, set\n\n\n    module loaders =\n        type LoaderOptions =\n            abstract crossOrigin: bool option with get, set\n            abstract loadType: float option with get, set\n            abstract xhrType: string option with get, set\n\n        and ResourceDictionary =\n            [<Emit(\"$0[$1]{{=$2}}\")>] abstract Item: index: string -> Resource with get, set\n\n        and [<Import(\"loaders.Loader\",\"PIXI\")>] Loader(?baseUrl: string, ?concurrency: float) =\n            // interface EventEmitter\n            member __.baseUrl with get(): string = failwith \"JS only\" and set(v: string): unit = failwith \"JS only\"\n            member __.progress with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.loading with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n            member __.resources with get(): ResourceDictionary = failwith \"JS only\" and set(v: ResourceDictionary): unit = failwith \"JS only\"\n            member __.add(name: string, url: string, ?options: LoaderOptions, ?cb: Func<unit>): Loader = failwith \"JS only\"\n            member __.add(url: string, ?options: LoaderOptions, ?cb: Func<unit>): Loader = failwith \"JS only\"\n            member __.add(obj: obj, ?options: LoaderOptions, ?cb: Func<unit>): Loader = failwith \"JS only\"\n            [<Emit(\"$0.on('complete',$1...)\")>] member __.on_complete(fn: Func<Loader, obj, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n            [<Emit(\"$0.on('error',$1...)\")>] member __.on_error(fn: Func<Error, Loader, Resource, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n            [<Emit(\"$0.on('load',$1...)\")>] member __.on_load(fn: Func<Loader, Resource, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n            [<Emit(\"$0.on('progress',$1...)\")>] member __.on_progress(fn: Func<Loader, Resource, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n            [<Emit(\"$0.on('start',$1...)\")>] member __.on_start(fn: Func<Loader, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n            member __.on(``event``: string, fn: Function, ?context: obj): EventEmitter = failwith \"JS only\"\n            [<Emit(\"$0.once('complete',$1...)\")>] member __.once_complete(fn: Func<Loader, obj, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n            [<Emit(\"$0.once('error',$1...)\")>] member __.once_error(fn: Func<Error, Loader, Resource, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n            [<Emit(\"$0.once('load',$1...)\")>] member __.once_load(fn: Func<Loader, Resource, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n            [<Emit(\"$0.once('progress',$1...)\")>] member __.once_progress(fn: Func<Loader, Resource, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n            [<Emit(\"$0.once('start',$1...)\")>] member __.once_start(fn: Func<Loader, unit>, ?context: obj): EventEmitter = failwith \"JS only\"\n            member __.once(``event``: string, fn: Function, ?context: obj): EventEmitter = failwith \"JS only\"\n            member __.before(fn: Function): Loader = failwith \"JS only\"\n            member __.pre(fn: Function): Loader = failwith \"JS only\"\n            member __.after(fn: Function): Loader = failwith \"JS only\"\n            member __.``use``(fn: Function): Loader = failwith \"JS only\"\n            member __.reset(): unit = failwith \"JS only\"\n            member __.load(?cb: Func<Loader, obj, unit>): Loader = failwith \"JS only\"\n\n        and [<Import(\"loaders.Resource\",\"PIXI\")>] Resource(?name: string, ?url: U2<string, ResizeArray<string>>, ?options: LoaderOptions) =\n            inherit EventEmitter()\n            member __.LOAD_TYPE with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n            member __.XHR_READ_STATE with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n            member __.XHR_RESPONSE_TYPE with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n            member __.name with get(): string = failwith \"JS only\" and set(v: string): unit = failwith \"JS only\"\n            member __.texture with get(): Texture = failwith \"JS only\" and set(v: Texture): unit = failwith \"JS only\"\n            member __.textures with get(): ResizeArray<Texture> = failwith \"JS only\" and set(v: ResizeArray<Texture>): unit = failwith \"JS only\"\n            member __.url with get(): string = failwith \"JS only\" and set(v: string): unit = failwith \"JS only\"\n            member __.data with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n            member __.crossOrigin with get(): string = failwith \"JS only\" and set(v: string): unit = failwith \"JS only\"\n            member __.loadType with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.xhrType with get(): string = failwith \"JS only\" and set(v: string): unit = failwith \"JS only\"\n            member __.error with get(): Error = failwith \"JS only\" and set(v: Error): unit = failwith \"JS only\"\n            member __.xhr with get(): XMLHttpRequest = failwith \"JS only\" and set(v: XMLHttpRequest): unit = failwith \"JS only\"\n            member __.complete(): unit = failwith \"JS only\"\n            member __.load(?cb: Func<unit>): unit = failwith \"JS only\"\n\n\n    module mesh =\n        type [<Import(\"mesh.Mesh\",\"PIXI\")>] Mesh(texture: Texture, ?vertices: ResizeArray<float>, ?uvs: ResizeArray<float>, ?indices: ResizeArray<float>, ?drawMode: float) =\n            inherit Container()\n            member __.DRAW_MODES with get(): obj = failwith \"JS only\" and set(v: obj): unit = failwith \"JS only\"\n            member __.texture with get(): Texture = failwith \"JS only\" and set(v: Texture): unit = failwith \"JS only\"\n            member __.uvs with get(): ResizeArray<float> = failwith \"JS only\" and set(v: ResizeArray<float>): unit = failwith \"JS only\"\n            member __.vertices with get(): ResizeArray<float> = failwith \"JS only\" and set(v: ResizeArray<float>): unit = failwith \"JS only\"\n            member __.indices with get(): ResizeArray<float> = failwith \"JS only\" and set(v: ResizeArray<float>): unit = failwith \"JS only\"\n            member __.dirty with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n            member __.blendMode with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.canvasPadding with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.drawMode with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.shader with get(): U2<Shader, AbstractFilter> = failwith \"JS only\" and set(v: U2<Shader, AbstractFilter>): unit = failwith \"JS only\"\n            member __._texture with get(): Texture = failwith \"JS only\" and set(v: Texture): unit = failwith \"JS only\"\n            member __.getBounds(?matrix: Matrix): Rectangle = failwith \"JS only\"\n            member __.containsPoint(point: Point): bool = failwith \"JS only\"\n            member __._renderCanvasTriangleMesh(context: CanvasRenderingContext2D): unit = failwith \"JS only\"\n            member __._renderCanvasTriangles(context: CanvasRenderingContext2D): unit = failwith \"JS only\"\n            member __._renderCanvasDrawTriangle(context: CanvasRenderingContext2D, vertices: float, uvs: float, index0: float, index1: float, index2: float): unit = failwith \"JS only\"\n            member __.renderMeshFlat(mesh: Mesh): unit = failwith \"JS only\"\n            member __._onTextureUpdate(): unit = failwith \"JS only\"\n\n        and [<Import(\"mesh.Rope\",\"PIXI\")>] Rope(texture: Texture, points: ResizeArray<Point>) =\n            inherit Mesh(unbox null)\n            member __._ready with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n            member __.points with get(): ResizeArray<Point> = failwith \"JS only\" and set(v: ResizeArray<Point>): unit = failwith \"JS only\"\n            member __.colors with get(): ResizeArray<float> = failwith \"JS only\" and set(v: ResizeArray<float>): unit = failwith \"JS only\"\n            member __.getTextureUvs(): TextureUvs = failwith \"JS only\"\n            member __.refresh(): unit = failwith \"JS only\"\n\n        and [<Import(\"mesh.Plane\",\"PIXI\")>] Plane(texture: Texture, ?segmentsX: float, ?segmentsY: float) =\n            inherit Mesh(unbox null)\n            member __.segmentsX with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.segmentsY with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n\n        and [<Import(\"mesh.MeshRenderer\",\"PIXI\")>] MeshRenderer(renderer: WebGLRenderer) =\n            inherit ObjectRenderer()\n            member __.indices with get(): ResizeArray<float> = failwith \"JS only\" and set(v: ResizeArray<float>): unit = failwith \"JS only\"\n            member __._initWebGL(mesh: Mesh): unit = failwith \"JS only\"\n            member __.render(mesh: Mesh): unit = failwith \"JS only\"\n            member __.flush(): unit = failwith \"JS only\"\n            member __.start(): unit = failwith \"JS only\"\n            member __.destroy(): unit = failwith \"JS only\"\n\n        // and MeshShader =\n        //     inherit Shader\n\n\n    module ticker =\n        type [<Import(\"ticker.Ticker\",\"PIXI\")>] Ticker() =\n            member __._emitter with get(): EventEmitter = failwith \"JS only\" and set(v: EventEmitter): unit = failwith \"JS only\"\n            member __._requestId with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __._maxElapsedMS with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.autoStart with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n            member __.deltaTime with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.elapsedMS with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.lastTime with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.speed with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.started with get(): bool = failwith \"JS only\" and set(v: bool): unit = failwith \"JS only\"\n            member __.FPS with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __.minFPS with get(): float = failwith \"JS only\" and set(v: float): unit = failwith \"JS only\"\n            member __._tick(time: float): unit = failwith \"JS only\"\n            member __._requestIfNeeded(): unit = failwith \"JS only\"\n            member __._cancelIfNeeded(): unit = failwith \"JS only\"\n            member __._startIfPossible(): unit = failwith \"JS only\"\n            member __.add(fn: Func<float, unit>, ?context: obj): Ticker = failwith \"JS only\"\n            member __.addOnce(fn: Func<float, unit>, ?context: obj): Ticker = failwith \"JS only\"\n            member __.remove(fn: Func<float, unit>, ?context: obj): Ticker = failwith \"JS only\"\n            member __.start(): unit = failwith \"JS only\"\n            member __.stop(): unit = failwith \"JS only\"\n            member __.update(): unit = failwith \"JS only\"\n\n        type [<Import(\"ticker\",\"PIXI\")>] Globals =\n            static member shared with get(): Ticker = failwith \"JS only\" and set(v: Ticker): unit = failwith \"JS only\"\n\n    type [<Import(\"*\",\"PIXI\")>] Globals =\n        static member VERSION with get(): string = failwith \"JS only\"\n        static member PI_2 with get(): float = failwith \"JS only\"\n        static member RAD_TO_DEG with get(): float = failwith \"JS only\"\n        static member DEG_TO_RAD with get(): float = failwith \"JS only\"\n        static member TARGET_FPMS with get(): float = failwith \"JS only\"\n        static member RENDERER_TYPE with get(): RendererType = failwith \"JS only\"\n        static member BLEND_MODES with get(): BlendModes = failwith \"JS only\"\n        static member DRAW_MODES with get(): DrawModes = failwith \"JS only\"\n        static member SCALE_MODES with get(): ScaleModes = failwith \"JS only\"\n        static member RETINA_PREFIX with get(): string = failwith \"JS only\"\n        static member RESOLUTION with get(): float = failwith \"JS only\"\n        static member FILTER_RESOLUTION with get(): float = failwith \"JS only\"\n        static member DEFAULT_RENDER_OPTIONS with get(): DefaultRenderOptions = failwith \"JS only\"\n        static member SHAPES with get(): Shapes = failwith \"JS only\"\n        static member SPRITE_BATCH_SIZE with get(): float = failwith \"JS only\"\n\n        static member loader with get(): loaders.Loader = failwith \"JS only\"\n        static member autoDetectRenderer(width: float, height: float, ?options: RendererOptions list, ?noWebGL: bool): U2<WebGLRenderer, CanvasRenderer> = failwith \"JS only\"\n\n"]}