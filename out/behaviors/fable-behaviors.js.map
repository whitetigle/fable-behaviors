{"version":3,"sources":["..\\..\\fable-behaviors.fsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCA6BK;AAAA;;AACH,sBACE,+DAGE;AAAA;AAAA;AAAA,OAHF,CADF;AAWA,mBAAY,kBAAZ;AAZmB;;;;uCAiBjB;AAAA;AAAyB;;;;;;;;;;;;;;;;;;+BAQzB;AAAA;AAAqB;;;;;;;;kCAIrB;AAAA;AAAgD;;;8BAf3C;AAAA,oCAAe,sBAAf;AAAiC;;;;;;;;;;;;;;AAkB5B;AAAgB;;AAGE;AAAA;AAAa,KAAb;;AACG;AAAA;AAAa,KAAb;;AACH;AAAA,cAAS,0BAAT;AAAkB,KAAlB;;AAGtB;AAAA,0CAGO,wBAHP,kCAKS,qBALT,6BAOI,qBAPJ,GACO,wBADP;AAAA;;AAWN;AAAA,mCAAiD;AAAA;AAAY,OAA7D;AACA,cAAS,aAAT;AACA;AAAkC,KAFlC;;AAnBU;AAAK;;AA0Bb;AAAO;AAEX;AACA;AACA;AAEe,mBAAf;AANQ;;AASV","file":"fable-behaviors.js","sourcesContent":["(**\r\n - title: Fable behaviors sample\r\n - tagline: fun with behaviors\r\n - app-style: width:1024px; margin:20px auto 50px auto;\r\n - require-paths: `'PIXI':'https://cdnjs.cloudflare.com/ajax/libs/pixi.js/3.0.11/pixi.min'`\r\n - intro: Just a try to implement the Fable architecture over Pixi. This is an experimentation for the moment\r\n*)\r\n\r\n#r \"../../node_modules/fable-core/Fable.Core.dll\"\r\n#load \"../../node_modules/fable-import-pixi/Fable.Import.Pixi.fs\"\r\n\r\nopen Fable.Core\r\nopen Fable.Import.Browser\r\nopen Fable.Import.PIXI\r\nopen System.Collections.Generic\r\nopen Fable.Core.JsInterop\r\nopen System\r\n\r\nopen Fable.Core\r\nopen Fable.Import.Browser\r\nopen Fable.Import.PIXI\r\nopen System.Collections.Generic\r\n\r\ntype State =\r\n  | Nothing \r\n  | Loading \r\n  | MainTitle\r\n  | Play \r\n\r\ntype RenderingContext private() =\r\n  let renderer : WebGLRenderer= \r\n    WebGLRenderer( \r\n      window.innerWidth, \r\n      window.innerHeight, \r\n      [\r\n        Antialias true\r\n        BackgroundColor ( float 0x020b1e )\r\n      ]\r\n    )\r\n\r\n  // our root container \r\n  let stage = new Sprite() \r\n\r\n  static let instance = RenderingContext()\r\n  static member Instance = instance\r\n  member self.SetInteractive() =\r\n    stage.interactive <- true// start our loading\r\n  member self.GetRenderer() =\r\n    renderer\r\n  member self.GetKnownRenderer() = \r\n    U2.Case2 renderer\r\n  member self.GetView() = \r\n    renderer.view\r\n  member self.Render() = \r\n    renderer.render stage\r\n  member self.GetRoot() = \r\n    stage\r\n  member self.GetBounds() =\r\n    Rectangle(0.,0.,renderer.width, renderer.height)\r\n\r\nlet updateLoop fps =\r\n  let mutable state : State = Loading\r\n\r\n  // start Loading\r\n  let errorCallback = fun(e) -> console.log e \r\n  let progressCallback = fun(e) -> console.log e\r\n  let onLoadComplete = fun() -> state <- MainTitle\r\n\r\n  let update(state) =\r\n    match state with \r\n    | Nothing -> State.Nothing\r\n\r\n    | Loading -> Nothing\r\n\r\n    | MainTitle -> Play\r\n\r\n    | Play -> Play\r\n\r\n  // actual game loop\r\n  let rec updateLoop(dt:float) =\r\n    window.requestAnimationFrame(FrameRequestCallback(updateLoop)) |> ignore\r\n    state <- update(state)\r\n    RenderingContext.Instance.Render()\r\n\r\n  updateLoop\r\n\r\nlet start divName fps  = \r\n  let view = RenderingContext.Instance.GetView()\r\n  // append renderer to our div element\r\n  document.getElementById(divName).appendChild( view ) |> ignore\r\n  view.style.display <- \"block\"\r\n  view.style.margin <- \"0 auto\"\r\n  // start actual game loop\r\n  updateLoop fps 0.\r\n\r\n// start our game\r\nstart \"game\" 60."]}